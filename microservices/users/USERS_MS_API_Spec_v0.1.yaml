openapi: 3.0.0

info:
  title: Users API
  description: Simple User API
  version: '0.1'
  

servers:
  - url: 'https://265de5cd-3658-4770-8ba0-5b525904a0d3.mock.pstmn.io/users'


paths:

    /users:
        post:
            summary: Creates an user
            description: Post description
            operationId: CreateUserService
            
            requestBody:
                description: Create user infos
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/CreateUserDTO'
                    
            responses:
                '201':
                    description: User has been created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
    
  
    /users/{id}:
        get:
            summary: Lists an user
            description: List description
            operationId: ListUserService
            
            parameters: 
                -   name: id
                    description: 'User UUID'
                    required: true
                    example: 'b8596407-ad0d-4bd2-83ae-0d122c128a3a'
                    in: path 
                    schema:
                        type: string
                
            responses:
                '200':
                    description: User has been listed
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'

        patch:
            summary: Updates an user
            description: Patch description
            operationId: UpdateUserService
            
            parameters: 
                -   name: id
                    description: 'User UUID'
                    required: true
                    example: 'b8596407-ad0d-4bd2-83ae-0d122c128a3a'
                    in: path 
                    schema:
                        type: string
            
            requestBody:
                description: Updates user infos
                content:
                    'application/json':
                        schema:
                            $ref: '#/components/schemas/CreateUserDTO'
                
            responses:
                '200':
                    description: User has been updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'

        delete:
            summary: Deletes an user
            description: Delete description
            operationId: DeleteUserService
            
            parameters: 
                -   name: id
                    description: 'User UUID'
                    required: true
                    example: 'b8596407-ad0d-4bd2-83ae-0d122c128a3a'
                    in: path 
                    schema:
                        type: string
                
            responses:
                '200':
                    description: User has been listed
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'

    /users/{id}/activate:
        get:
            summary: Activates an user
            description: Activate description
            operationId: ActivateUserService
            
            parameters: 
                -   name: id
                    description: 'User UUID'
                    required: true
                    example: 'b8596407-ad0d-4bd2-83ae-0d122c128a3a'
                    in: path 
                    schema:
                        type: string
                
            responses:
                '200':
                    description: User has been activated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'


components:
  schemas:
    CreateUserDTO:
      type: object
      required:
        - name
        - email
        - sex
        - password
        - birthdate
        - document_number
      properties:
        role_id:
            type: string
            description: Must be an valid UUID
            example: 'Role UUID' 
        name:
            type: string
            example: 'Your name'
        email:
            type: string
            description: Must be an valid email like email@email.com
            example: 'email@email.com'
        password:
            description: Will be encrypted before being stored in DB
            type: string
            example: 'Your password'
        sex:
            type: string
            example: 'Your name'
        birthdate:
            type: string
            example: 'DD/MM/YYYY'
        document_number:
            type: string
            example: '999.999.999-99'

          
    User:
      type: object
      properties:
        id:
            type: string
            description: Must be an valid UUID
            example: 'da695b93-2bd6-404a-87da-fe3e8b53b940'
        role_id:
            type: string
            example: 'Role UUID' 
        name:
            type: string
            example: 'Your name'
        email:
            type: string
            description: Must be an valid email
            example: 'email@email.com'
        password:
            description: Will be encrypted before being stored in DB
            type: string
            example: 'Your password'
        sex:
            type: string
            example: ''Your name''
        birthdate:
            type: string
            description: Must be in the format DD/MM/YYYY if not it will generate an error
            example: 'DD/MM/YYYY'
        document_number:
            type: string
            description: Must be an valid 
            example: '999.999.999-99'
        